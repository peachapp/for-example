{"version":3,"sources":["utils/fullScreen.js","layout/sidebar/index.js","store/action/types.js","layout/header/index.js","layout/index.js","routers/index.js","App.js","reportWebVitals.js","store/reducer/index.js","store/index.js","index.js"],"names":["isFullScreenAvailable","document","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","Sider","Layout","Item","Menu","menuData","key","title","path","icon","HomeOutlined","UserOutlined","Sidebar","navigate","useNavigate","location","useLocation","collapsed","useSelector","state","currentPathKey","find","menuDataItem","pathname","useState","selectedKeys","setSelectedKeys","className","width","collapsedWidth","trigger","collapsible","theme","mode","onClick","map","React","memo","collapsed__TOGGLE_CLOUSE","collapsed__TOGGLE_OPEN","isFullScreen_TOGGLE_CLOUSE","isFullScreen_TOGGLE_OPEN","HeaderAnt","LayoutAnt","Header","dispatch","useDispatch","style","padding","type","MenuUnfoldOutlined","MenuFoldOutlined","FullscreenOutlined","Content","props","contentRef","useRef","isFullScreen","useEffect","element","requestMethod","requestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","call","window","ActiveXObject","wscript","SendKeys","requestFull","current","minHeight","ref","children","Home","lazy","About","NotFound","RoutersConfig","fallback","index","App","onFullscreenchange","e","fullscreenElement","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","reducers","combineReducers","reducer","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cbf92182.chunk.js","sourcesContent":["// 浏览器是否支持全屏模式\nexport const isFullScreenAvailable = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled || false;\n\n// 进入全屏\nexport const requestFull = (element) => {\n  // 判断各种浏览器，找到正确的方法\n  const requestMethod = element.requestFullscreen || // W3C\n    element.webkitRequestFullScreen ||\n    element.mozRequestFullScreen ||\n    element.msRequestFullscreen;\n\n  if (requestMethod) {\n    requestMethod.call(element);\n  } else if (typeof window.ActiveXObject !== \"undefined\") { // for Internet Explorer\n    var wscript = new window.ActiveXObject(\"WScript.Shell\");\n    if (wscript !== null) {\n      wscript.SendKeys(\"{F11}\");\n    };\n  };\n};\n\n//退出全屏\nexport const exitFull = () => {\n  // 判断各种浏览器，找到正确的方法\n  const exitMethod = document.exitFullscreen || // W3C\n    document.webkitCancelFullScreen ||\n    document.mozCancelFullScreen ||\n    document.msExitFullscreen;\n\n  if (exitMethod) {\n    exitMethod.call(document);\n  } else if (typeof window.ActiveXObject !== \"undefined\") { //for Internet Explorer\n    var wscript = new window.ActiveXObject(\"WScript.Shell\");\n    if (wscript !== null) {\n      wscript.SendKeys(\"{F11}\");\n    };\n  };\n};","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Layout, Menu } from 'antd';\nimport {\n  HomeOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport './index.css';\n\nconst { Sider } = Layout;\nconst { Item } = Menu;\n\nconst menuData = [\n  { key: 'home', title: '首页', path: '/home', icon: <HomeOutlined /> },\n  { key: 'about', title: '关于作者', path: '/about', icon: <UserOutlined /> },\n  // { key: '404', title: '404', path: '', icon: '' },\n];\n\nconst Sidebar = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const collapsed = useSelector(state => state.collapsed);\n\n  const currentPathKey = ((menuData || []).find(menuDataItem => menuDataItem.path === location.pathname) || {}).key || 'home';\n  const [selectedKeys, setSelectedKeys] = useState([currentPathKey])\n\n  const onSelectedKeysChange = ({ key }) => {\n    navigate(`/${key}`);\n    setSelectedKeys([key]);\n  };\n\n  return <Sider className=\"sidebar-container\" width={144} collapsedWidth={64} trigger={null} collapsible collapsed={collapsed}>\n    <Menu theme=\"dark\" mode=\"inline\" selectedKeys={selectedKeys} onClick={onSelectedKeysChange}>\n      {\n        (menuData || []).map(menuDataItem => {\n          return <Item key={menuDataItem.key} icon={menuDataItem.icon}>\n            {menuDataItem.title}\n          </Item>\n        })\n      }\n    </Menu>\n  </Sider>\n};\n\nexport default React.memo(Sidebar);\n","// collapsed\nexport const collapsed__TOGGLE_CLOUSE = 'collapsed__TOGGLE_CLOUSE';\nexport const collapsed__TOGGLE_OPEN = 'collapsed__TOGGLE_OPEN';\n\n// isFullScreen\nexport const isFullScreen_TOGGLE_CLOUSE = 'isFullScreen_TOGGLE_CLOUSE';\nexport const isFullScreen_TOGGLE_OPEN = 'isFullScreen_TOGGLE_OPEN';","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Layout as LayoutAnt } from 'antd';\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  FullscreenOutlined,\n} from '@ant-design/icons';\nimport { collapsed__TOGGLE_CLOUSE, collapsed__TOGGLE_OPEN, isFullScreen_TOGGLE_OPEN } from 'store/action/types';\nimport { isFullScreenAvailable } from 'utils/fullScreen';\nimport './index.css';\n\nconst { Header: HeaderAnt } = LayoutAnt;\n\nconst Header = () => {\n  const collapsed = useSelector(state => state.collapsed);\n\n  const dispatch = useDispatch();\n\n  const onCollapsedChange = () => {\n    dispatch({ type: collapsed ? collapsed__TOGGLE_OPEN : collapsed__TOGGLE_CLOUSE });\n  }\n\n  const onIsFullScreenChange = () => {\n    dispatch({ type: isFullScreen_TOGGLE_OPEN });\n  };\n\n  return <HeaderAnt className=\"header-container\" style={{ padding: 0 }}>\n    <div className=\"header-control\" onClick={onCollapsedChange}>\n      {\n        collapsed ?\n          <MenuUnfoldOutlined className=\"header-control-icon\" /> :\n          <MenuFoldOutlined className=\"header-control-icon\" />\n      }\n    </div>\n    {\n      isFullScreenAvailable ?\n        <div className=\"header-screen\" onClick={onIsFullScreenChange}>\n          <FullscreenOutlined className=\"header-screen-icon\" />\n        </div>\n        : null\n    }\n  </HeaderAnt>\n};\n\nexport default React.memo(Header);\n","import React, { useRef, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Layout as LayoutAnt } from 'antd';\nimport { requestFull } from 'utils/fullScreen';\nimport Sidebar from './sidebar/index';\nimport Header from './header/index';\nimport './index.css';\n\nconst { Content } = LayoutAnt;\n\nconst Layout = (props) => {\n  const contentRef = useRef(null);\n  const isFullScreen = useSelector(state => state.isFullScreen);\n\n  useEffect(() => {\n    if (isFullScreen) {\n      requestFull(contentRef.current);\n    };\n  }, [isFullScreen])\n\n  return <LayoutAnt className=\"layout-container\">\n    <Header />\n    <LayoutAnt>\n      <Sidebar />\n      <Content\n        style={{\n          minHeight: 280,\n        }}\n      >\n        <div className=\"layout-content\" ref={contentRef}>\n          {props.children}\n        </div>\n      </Content>\n    </LayoutAnt>\n  </LayoutAnt>\n};\n\nexport default React.memo(Layout);\n","import React, { Suspense, lazy } from 'react';\nimport { HashRouter, Routes, Route, Outlet } from 'react-router-dom';\n//HashRouter最外层必须由它包裹\n//Routes包裹Route\n//Route配置路由规则\n//Link用于点击跳转\n// import Loading from 'components/loading/index';\n// const Login = lazy(() => import('pages/login/index'));\nimport Layout from 'layout/index';\nconst Home = lazy(() => import('pages/home/index'));\nconst About = lazy(() => import('pages/about/index'));\nconst NotFound = lazy(() => import('pages/notFound/index'));\n\n// const Layout = () => {\n//   return (\n//     <div>\n//       {/* A \"layout route\" is a good place to put markup you want to\n//           share across all the pages on your site, like navigation. */}\n//       <nav>\n//         <ul>\n//           <li>\n//             <Link to=\"/\">Home</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/about\">About</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/nothing-here\">Nothing Here</Link>\n//           </li>\n//         </ul>\n//       </nav>\n\n//       <hr />\n\n//       {/* An <Outlet> renders whatever child route is currently active,\n//           so you can think about this <Outlet> as a placeholder for\n//           the child routes we defined above. */}\n//       <Outlet />\n//     </div>\n//   );\n// }\n\nconst RoutersConfig = () => {\n  return <HashRouter>\n    <Suspense fallback={<div>loading...</div>}>\n      <Routes>\n        <Route path=\"/\" element={<Layout ><Outlet /></Layout>}>\n          <Route index element={<Home />} />\n          <Route path=\"home\" element={<Home />} />\n          <Route path=\"about\" element={<About />} />\n\n          {/* Using path=\"*\"\" means \"match anything\", so this route\n          acts like a catch-all for URLs that we don't have explicit\n          routes for. */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Route>\n      </Routes>\n    </Suspense>\n  </HashRouter>\n};\n\nexport default RoutersConfig;","import { useEffect } from 'react';\nimport RoutersConfig from 'routers/index';\nimport { useDispatch } from 'react-redux';\nimport { isFullScreen_TOGGLE_CLOUSE } from 'store/action/types';\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const onFullscreenchange = (e) => {\n    if (document.fullscreenElement) {\n      // 全屏\n    } else {\n      dispatch({ type: isFullScreen_TOGGLE_CLOUSE });\n    };\n  };\n\n  useEffect(() => {\n    document.addEventListener('fullscreenchange', onFullscreenchange);\n    // 组件销毁\n    return () => {\n      document.removeEventListener('fullscreenchange', onFullscreenchange);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <RoutersConfig />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { collapsed__TOGGLE_CLOUSE, collapsed__TOGGLE_OPEN, isFullScreen_TOGGLE_CLOUSE, isFullScreen_TOGGLE_OPEN } from 'store/action/types';\n\n// collapsed\nexport function collapsed(state = false, action) {\n  switch (action.type) {\n    case collapsed__TOGGLE_OPEN:\n      return false;\n    case collapsed__TOGGLE_CLOUSE:\n      return true;\n    default:\n      return state;\n  };\n};\n\n// isFullScreen\nexport function isFullScreen(state = false, action) {\n  switch (action.type) {\n    case isFullScreen_TOGGLE_CLOUSE:\n      return false;\n    case isFullScreen_TOGGLE_OPEN:\n      return true;\n    default:\n      return state;\n  };\n};","import { combineReducers, createStore } from 'redux';\nimport * as reducer from './reducer';\n\nconst reducers = combineReducers({\n  ...reducer\n});\n\nconst store = createStore(reducers); // 传入reducers\n\nexport default store; // 导出仓库","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from 'store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}